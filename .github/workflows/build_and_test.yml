on:
  workflow_call:
    inputs:
      configuration:
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Get Version Pull Request / Push
      if: github.event_name == 'pull_request' || github.event_name == 'push'
      run: |
        echo "TEMP_VERSION=0.0.0" >> "$GITHUB_ENV"

    - name: Get Version Release
      if: github.event_name == 'release'
      run: |
        echo "TEMP_VERSION=${{ github.event.release.name }}" >> "$GITHUB_ENV"

    - name:  Get Definitive Version
      run: |
        echo "VERSION=${{ env.TEMP_VERSION }}" >> "$GITHUB_ENV"

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore -c ${{ inputs.configuration }} /p:Version=${{ env.VERSION }}
      
    - name: Test
      if: github.event_name == 'pull_request'
      run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage /p:Version=${{ env.VERSION }}
      
    - name: Code Coverage Report
      if: github.event_name == 'pull_request'
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage/**/coverage.cobertura.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: '25 75'

    - name: Add Coverage PR Comment
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: code-coverage-results.md

    - name: Pack
      if: github.event_name == 'release'
      run: |
        dotnet pack --configuration Release /p:Version=${{ env.VERSION }} --no-build --output .

    - name: Nuget Push
      if: github.event_name == 'release'
      run: |
        dotnet nuget push DynaMight.${{ env.VERSION }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }}